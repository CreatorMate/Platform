generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model creator_brand {
  id         String   @id @default(uuid()) @db.Uuid
  creator_id String   @db.Uuid
  brand_id   Int
  accepted   Boolean?
  creators    creators @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  brands      brands   @relation(fields: [brand_id], references: [id], onDelete: Cascade)

  @@map("creator_brand")
}

model creators {
  id                 String                @id @default(uuid()) @db.Uuid
  first_name         String?               @db.VarChar
  last_name          String?               @db.Text
  instagram_id       Int? @unique
  user_id            String               @db.Uuid           @unique
  status             String?               @db.Text
  handle             String?               @db.VarChar
  linked             Boolean?
  creator_brand      creator_brand[]
  users              users               @relation(fields: [user_id], references: [id])
  instagram_account instagram_accounts? @relation(fields: [instagram_id], references: [id])

  @@map("creators")
}

model users {
  id          String      @id @default(uuid()) @db.Uuid
  external_id String?     @db.VarChar
  email       String?     @db.VarChar
  brand_id    Int?
  full_name   String?     @db.VarChar
  picture     String?     @db.VarChar
  creator     creators?
  brands       brands? @relation(fields: [brand_id], references: [id])

  @@map("users")
}

model projects {
  id              Int                   @id @default(autoincrement())
  color           String?               @db.Text
  name            String?               @db.Text
  creators        String?               @db.Text
  days            String?               @db.Text
  slug            String?               @db.Text
  description     String?               @db.Text
  brand_id        Int?
  columns         columns[]
  brands           brands?               @relation(fields: [brand_id], references: [id], onDelete: Cascade)

  @@map("projects")
}

model brands {
  id                   Int                    @id @default(autoincrement())
  picture              String?                @db.Text
  name                 String?                @db.VarChar
  is_premium           Boolean?
  customer_id          String?                @db.VarChar
  instagram_id         Int? @unique
  instagram_accounts   instagram_accounts?   @relation(fields: [instagram_id], references: [id])
  widgets              widgets[]
  projects             projects[]
  creator_brand        creator_brand[]
  users                users[]

  @@map("brands")
}
model instagram_accounts {
  id           Int        @id @default(autoincrement())
  expires_at   DateTime
  token        String    @db.Text
  instagram_id String
  creators      creators?
  brands       brands?

  @@map("instagram_accounts")
}

model columns {
  id              Int               @id @default(autoincrement())
  name            String            @db.Text
  project_id      Int
  position        Int?
  project_widgets project_widgets[]
  projects         projects         @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@map("columns")
}

model project_widgets {
  id         String   @id @default(uuid()) @db.Uuid
  widget_id  Int?
  project_id Int
  component  String?  @db.Text
  value      String?  @db.Text
  column_id  Int
  order      Int?
  columns    columns @relation(fields: [column_id], references: [id], onDelete: Cascade)

  @@map("project_widgets")
}

model widgets {
  id          Int       @id @default(autoincrement())
  top         String?   @db.Text
  grouped     Boolean?
  name        String?   @db.Text
  description String?   @db.Text
  brand_id    Int?
  component   String?   @db.Text
  action      String?   @db.Text
  endpoint    String?   @db.Text
  metric_name String?   @db.Text
  brands      brands?   @relation(fields: [brand_id], references: [id], onDelete: Cascade)

  @@map("widgets")
}